:orphan:

..  Copyright (C) Paul Resnick.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, Prefaces, and
    Contributor List, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

.. highlight:: python
    :linenothreshold: 500


Activities through 11/27 (through T-Giving Break)
=================================================

* **Before class Monday 11/21:**

  * Read about the :ref:`Facebook API <fb_api_exercises>` and check out the slides on Canvas > Files > Lecture Slides > FB Graph API (especially slide #16!)
  * Take a look at the `Facebook Graph API overview <https://developers.facebook.com/docs/graph-api/overview>`_
  * Try out the `Facebook Graph API Explorer <https://developers.facebook.com/tools/explorer/>`_. You should try at least a couple different requests in the explorer and explore the resulting data (try copying it into jsoneditoronline.org!). 
  * Note that if you don't use Facebook normally, you can get data from our SI 106 Facebook group by replacing ``me`` with the 106 Facebook group ID. Check out the problem set to find the 106 group ID! (We are not displaying it here because this page is publicly available, and our group is private to the class.)
  * Read about `Paging with the Facebook API <https://developers.facebook.com/docs/graph-api/using-graph-api#paging>`_, focusing on **Offset-based pagination**. Don't worry if you don't understand all of this -- this is to give you an idea of what the possibilities are. There is an example of code that uses Facebook paging which you can look at in the ``fbapi.py`` code on Canvas.
  * By Monday 11/21, we'll have available on Canvas a possible solution for the challenge problem on last week's Problem Set -- code for a Flickr tag recommender.


.. usageassignment::
  :subchapters: FacebookAPI/FBAPI
  :assignment_name: Prep 20
  :deadline: 2016-11-21 18:40
  :pct_required: 50
  :points: 50

* **Wednesday's lecture will be time to work on problem sets, with a few staff members around.** We will not have discussion section this week. We will not have office hours during Thanksgiving break, but we will be online on the Facebook group when we can be! Happy Thanksgiving break.

* **Before Sunday 11/27 at 11:59 PM:**

  * Complete and submit your :ref:`Problem Set 10 <problem_set_10>`, and save an answer to your Demonstrate Understanding for this week (linked below).
  * Complete :ref:`Reading Response 11 <reading_response_11>`.

This Week's Reading Responses
-----------------------------

.. _reading_response_11:

.. external:: rr_11

  `Reading Response 11 <https://umich.instructure.com/courses/105657/assignments/131310>`_ on Canvas.



.. _problem_set_10:

Problem Set
-----------

Go `HERE to see the Problem Set 10 assignment <https://umich.instructure.com/courses/105657/assignments/131296>`_, where you can find the file you need to download and edit, and where you can submit your file for this assignment.

.. note::

    Reminder: we do not debug code when grading, so we cannot grade code that does not run! Make sure your code runs before submitting it -- you should comment out any code that does not.

.. note::

    For some of the problems on this Problem Set, you'll have to write your own tests, which should check whether the problems follow the instructions! 

    We suggest reading through the whole PSet first, and writing Unit Tests for each problem for which you need to do so, and *then* solving the problems themselves (test-driven development!).

    It's a good idea to include, as the last argument to each of your tests, a brief, clear English description of what the test is checking for! e.g. "Testing whether the value of fb_data is a Python dictionary".

.. external:: ps_10_01
    
    **PROBLEM 1**

    We've provided a file ``samplepost.txt`` that contains a sample of data representing a Facebook post. (It won't have the same data that your Facebook posts have, of course, but it will have a very similar structure!) Using this for data investigation (try copying and pasting it into jsoneditoronline.org!), fill in the definition of the class ``Post`` to hold information about one post on Facebook.

    We've provided a skeleton of the ``Post`` class with some code:

    .. sourcecode:: python

        class Post():
            """object representing status update"""
            def __init__(self, post_dict={}):
                if 'message' in post_dict:
                    self.message = post_dict['message']
                else:
                    self.message = ""
                
            def positive(self):
                return None
                           
            def negative(self):
                return None

            def emo_score(self):
                return None

    Add to that code in your ``106_ps10.py`` file so that it fulfills the following instructions.

    If the post dictionary has a ``'comments'`` key, set an instance variable ``self.comments`` to hold the list of comment dictionaries you extract from ``post_dict``. Otherwise, set ``self.comments`` to be an empty list: ``[]``.

    Note that something similar has already been done for the contents (``message``) of the original post, so you can use that as a template! Extracting the list of comment dictionaries from a post_dict is a little bit harder. Take a look at the sample of what a ``post_dict`` looks like in the file samplepost.txt / using jsoneditoronline in order to do nested data investigation.

    Now, similarly, *if* the post has any likes, set ``self.likes`` to the value of the list of likes dictionaries. Otherwise, if there are no ``'likes'``, set ``self.likes`` to hold an empty list.

    Finally, finish defining three methods of the class Post:

    ``positive`` should return the number of words in the message that are in the list of positive words called ``pos_ws`` (provided in our code)

    ``negative`` should return the number of words in the message that are in the list of negative words called ``neg_ws`` (provided in our code)

    ``emo_score`` should return an integer: the difference between the positive and negative scores for that post. 

    (Careful: "disgusting" and "disgust", for example, are 2 different words -- so if the word "disgust" is in a message, it should only get 1 negative count for that, not two.)

    We have provided tests for this problem.

    .. note::

        Our tests for this problem do not include punctuation. We are not being fussy in our tests about whether you count an emotive word like beautiful if it has an exclamation point after it, as in the sentence "The sunset is beautiful!". You do not have to worry about accounting for punctuation for the sake of the problem set.

        However, if you care about accuracy in your analyses, you may decide you do want to be fussy about that. Feel free to add a test to check for that. Here's a hint on how you might write code that would pass a stricter test.

        1. If you split a string wherever there are spaces, you may get a string like "beautiful!" as one of the words
        2. You can write a function that will strip punctuation from any string. ``s = s.replace("!", "")`` will remove all occurrences of ! and reassign the resulting string to the same variable s. You can repeat that for other punctuation symbols like commas and periods.
        3. After stripping punctuation, you can check whether the string is in the list of positive words.


.. activecode:: ps_10_02

    **PROBLEM 2**

    We've provided the following code in your ``106_ps9.py`` file, where you'll need it for the remainder of the problem set, including our tests. (Don't change it!) In this code window, add comments that describe what these lines of code do.
    ~~~~
    sample = open('samplepost.txt').read()
    sample_post_dict = json.loads(sample)
    p = Post(sample_post_dict)

.. external:: ps_10_03
    
    **PROBLEM 3**

    Now, get data from your last 100 posts on Facebook (or the last 100 posts in the 106 Facebook group).

    We've provided some code here for you to use in order to do this:

    We've provided a place for you to put your Facebook access token that you get from ``https://developers.facebook.com/tools/explorer``. (See your assigned readings/lecture materials for more detail.) Remember that in order to get data from our class FB group, you will need to use **version 2.3**, so that is the version we've included in the baseurl and shown in class and you will need to select the **user_groups** permission after you click Get Token. Also remember that every few hours, you'll need to get a new access token from the Graph explorer.

    We've saved the base url for Facebook in a variable, ``baseurl``. The baseurl looks like this: ``https://graph.facebook.com/v2.3/me/feed``. That's the baseurl for fetching recent posts from your own feed. You'll also see we've provided a variable in your file called ``GROUP_ID``. You should replace the ``me`` in the baseurl with that variable's value if you want to get data from the course FB group.

    We've also built your necessary params dictionary to get data about 100 Facebook posts, their comments, and their likes. This specifies exactly what information Facebook should provide about each of the posts. You could try other parameters as well, if you want.

    .. sourcecode:: python

        url_params = {}
        url_params["access_token"] = access_token
        url_params["fields"] = "comments{comments{like_count,from,message,created_time},like_count,from,message,created_time},likes,message,created_time,from"
        url_params["limit"] = 100

    Use the baseurl and url_params to make a request to the facebook API. Convert the results to a python dictionary and save it to the variable name ``fb_data``. (This will get you pretty complex data -- but you've seen data similar to it before, when we first did nested data investigation.)

.. external:: ps_10_03_test

    Write at least one unit test for Problem 3. Just check to make sure fb_data is a dictionary and that it has a key called 'data'.

    You can write it just beneath the space for your code, or you can add your new tests to the other ``unittest.TestCase`` subclasses near the bottom of the problem set that we've already provided for a couple problems. We recommend putting your tests at the bottom of the file, and modeling your tests off the tests you already see there and the ones you see in previous problem sets!

  
.. external:: ps_10_04
    
    **PROBLEM 4**

    Given all this Facebook data you have retrieved, create a list of instances of class ``Post``. Save that list of Post instances in a variable called ``post_insts``.

    **NOTE:** This requires understanding -- but the code pattern is an accumulation pattern just like the many list accumulations you've already written this semester, and the code to create an instance is just calling the constructor of ``Post`` like you did for ``Photo`` and ``Photo2`` last week!

.. external:: ps_10_04_test

    Write at least 2 tests for Problem 4. (**Hint:** One of those tests should be checking to make sure that at least one of the items in ``post_insts`` is an instance of class ``Post``! You may want to look at the material on testing for a value's type, to help with this.)

.. external:: ps_10_05
    
    **PROBLEM 5**

    Write code to compute the 3 people who liked the most posts in the feed, and save those people's names in a list called ``top_likers``.

    Then compute the 3 people who commented most frequently in the feed, and save those people's names in a list called ``top_commenters``.

    HINT: creating dictionaries and sorting may both be useful here.

.. external:: ps_10_05_test

  We have provided 1 test for Problem 5. Add at least 2 more methods to the ``Problem5`` test class to test the code for Problem 5.

  Note that you may not be able to test *whose* names should be in the lists, since the correct answer may depend on recent activity in the feed, and thus is not stable over time. Think: what DO you know about the values ``top_commenters`` and ``top_likers`` ought to end up with, which you could check in a test?

  Also note that the strings you get back from web data are **unicode** strings -- that's why we're testing for unicode strings in the one test that is already there. (Check it out!)

.. external:: ps_10_06
    
    **PROBLEM 6**

    Define a function called ``unique_facebookers`` that takes as input a list of ``Post`` instances.
    
    The function should return the string "commenters" if the number of unique people who commented on all of those posts is larger than the number of unique people who liked at least one post in your data. 

    If the number of unique people who liked posts in your data is bigger than the number who commented, the function should return the string "likers". 

    If the count of unique people who liked posts in your feed is equal to the count of unique people who made comments in your feed, it should return the string "equal". 

    For example: if the comments on my posts are made by, in order: Mary, Tess, Nat, Jackson, Tess, and Mary, then 4 unique people commented. If the following people liked my posts, overall: Nat, Jackson, Jackson, Mary, then 3 unique people liked my posts. If this were the case in my Post instances list, invoking my ``unique_facebookers`` function on my list should return ``"commenters"``. 

    Note that this is NOT the same as looking at whether there were more comments or likes overall!

.. external:: ps_10_06_test

    We have provided a unit test in the ``Problem6`` class at the bottom of the file that checks whether ``unique_facebookers`` is working correctly, but it's only one test.

    Add at least 1 more test method to the ``Problem6`` class to test something else about the ``unique_facebookers`` function. 

    **Hint:** What type should it return? What could go wrong with it? (There's no single correct answer, anything that works properly is fine, but this test does not need to be complex.) 

    Check out the first test we've included for ``unique_facebookers`` to get an idea of how you can invoke it in a test to check its output given particular input.


.. external:: ps_10_07
    
    **PROBLEM 7**

    Write code to output a .csv file called emo_scores.csv that lets you make scatterplots (in Excel or Google sheets) showing net positivity (emo_scores) on x-axis and comment-counts and like-counts on the y-axis. 
    
    Each row in the CSV should represent one post, and should include: emo score, comment counts, and like counts, in that order.

    Use the CSV to create a scatterplot of your data, which you can do in Excel or Google Sheets. Then, post a screenshot of your scatterplot to our facebook group! (You do not have to do this, but we encourage it.)

    You can see what the scatterplot might look like in ``emo_scores.xlsx``, included in the assignment files. (In the example case, there's not an obvious correlation between positivity and how many comments or likes. There may not be, but you find that out by exploring the data!)

    **Submit your generated .CSV to Canvas.** Please make sure it is saved with the exact name **emo_scores.csv** -- our grading process depends upon it having the correct name!

    Can you see any trends or possible relationships between likes, comments, and emo_scores once you generate a scatterplot? (Something to consider/discuss. Not graded.)

    Note that you can't easily test this, because it generates a file -- the test is seeing whether the file is formatted correctly and whether the data seems to make some sense when you generate the scatterplot!


.. external:: ps10_dyu

    Complete this week's `Demonstrate Your Understanding <https://umich.instructure.com/courses/105657/assignments/131282>`_ assignment on Canvas.